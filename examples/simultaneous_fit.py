"""
Here we analyze the correlator data generated by the compute_correlators.py
script, computing the pseudoscalar mass and decay constant.
"""

import numpy as np
import matplotlib.pyplot as plt

import pyQCD

def fit_function(b, t, Ct, err, fit_range):
    """Compute the residual for the PP and PA correlators at the same time.
    Ct will be 2d ndarray, with the first row being the PP correlator and
    the second being the PA correlator."""

    T = t.size
    
    x = t[fit_range].real
    y = Ct[:, fit_range].real
    yerr = err[:, fit_range].real

    resids_PP = (y[0]
                 - b[0]**2 / (2 * b[1]) * np.exp(-b[1] * x)
                 - b[0]**2 / (2 * b[1]) * np.exp(-b[1] * (T - x))) \
                 / yerr[0]

    resids_PA = (y[1]
                 + b[0] * b[2] * np.exp(-b[1] * x)
                 + b[0] * b[2] * np.exp(-b[1] * (T - x))) \
                 / yerr[1]

    return np.append(resids_PP, resids_PA)

if __name__ == "__main__":

    # First load the data from the zip archive
    data = pyQCD.load_archive("4c8_correlators_m0.4_m0.03.zip")

    # Filter the data. Now we'll use a list of arrays, where the
    # first row is the PP correlator and the second in PA correlator
    filtered_data = [np.array([datum[("g5_g5", "LLLL")],
                               datum[("g5_g5g4", "LLLL")]])
                     for datum in data]

    # We need to estimate the error in the correlators to supply to
    # the fitting function.
    corr_err = np.std(filtered_data, axis=0)

    # Now do the fit. Here use the pyQCD.fit_correlators function
    # to fit two correlators simultaneously using the fit function we
    # defined above.
    vals_mean, vals_err \
      = pyQCD.jackknife(filtered_data, pyQCD.fit_correlators,
                        kwargs={"fit_function": fit_function,
                                "fit_range": [2, 6],
                                "initial_parameters": [1.0, 1.0, 1.0],
                                "correlator_std": corr_err})

    print("Computed mass: {} +/- {}".format(vals_mean[1], vals_err[1]))
    print("Computed decay constant: {} +/- {}"
          .format(vals_mean[2], vals_err[2]))
