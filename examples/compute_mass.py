"""
Here we analyze the correlator data generated by the compute_correlators.py
script, plotting the effective mass curve and the fitted mass.
"""

import numpy as np
import matplotlib.pyplot as plt

import pyQCD

if __name__ == "__main__":
    
    # First load the data from the zip archive
    data = pyQCD.io.load_archive("4c8_correlators_m0.4_m0.03.zip")

    filtered_data = [datum[(("g5", "g5"), "LLLL")] for datum in data]
    
    # Then we'll need an estimate of the error in the correlators to supply
    # to the fitting function
    corr_err = np.std(filtered_data, axis=0)

    # Here's the fit range we'll use, as we'll need it more than once
    fit_range = [2, 6]
    
    # Now we'll fit the lowest lying state of the pseudoscalar correlator. We do
    # the fit under the jackknife to get an estimation of the error. The
    # jackknife function takes the data as its first argument and the
    # measurement function as the second argument. The arguments to the
    # measurement function are specified using the args and kwargs named
    # arguments. Here we specify a fit range from the 2nd to 6th timeslices.
    mass_mean, mass_err \
      = pyQCD.analysis.jackknife(filtered_data, pyQCD.analysis.compute_energy,
                                 args=[fit_range, [1., 1.], corr_err])
    
    # To plot the effective mass, we'll need to compute it under the jackknife
    # again
    effmass_mean, effmass_err \
      = pyQCD.analysis.jackknife(filtered_data,
                                 pyQCD.analysis.compute_effmass)
    
    t = np.arange(effmass_mean.size)    
    plt.errorbar(t, effmass_mean, effmass_err, fmt='o', capsize=0)
    
    # Plot the mass over the fitting range, along with error margins
    fit_range[1] -= 1
    plt.plot(fit_range, [mass_mean, mass_mean], 'b--')
    plt.fill_between(fit_range, [mass_mean - mass_err, mass_mean - mass_err],
                     [mass_mean + mass_err, mass_mean + mass_err], alpha=0.5)
    
    plt.xlabel("$t$", fontsize=18)
    plt.ylabel("$m_\mathrm{err}(t)$", fontsize=18)
    
    plt.show()
